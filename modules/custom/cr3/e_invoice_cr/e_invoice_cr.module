<?php

/**
 * @file
 * Contains e_invoice_cr.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_help().
 */
function e_invoice_cr_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the e_invoice_cr module.
    case 'help.page.e_invoice_cr':
      e_invoice_cr_check_java();
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module provides an invoice system according to the costa rican regulations.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function e_invoice_cr_theme() {
  return [
    'e_invoice_cr' => [
      'render element' => 'children',
    ],
  ];
}

/**
 * Implements hook_preprocess_page().
 */
function e_invoice_cr_preprocess_page(&$variables) {
  $current_path = \Drupal::service('path.current')->getPath();
  if (strpos($current_path, 'e-invoice-cr') || strpos($current_path, 'e_invoice_cr')) {
    e_invoice_cr_check_java();
  }
}

/**
 * Custom function to check if java is available on the server.
 */
function e_invoice_cr_check_java() {
  $error_message = t('Invoice CR Module: Java not detected on the server. This module needs java installed to work properly.');
  $command = 'java -version && echo 1 || echo 0';
  $result = exec($command, $response);
  if (!$result) {
    drupal_set_message($error_message, 'error');
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function e_invoice_cr_preprocess_image_widget(&$variables) {
  $element = $variables['element'];

  $variables['attributes'] = [
    'class' => [
      'image-widget',
      'js-form-managed-file',
      'form-managed-file',
      'clearfix',
    ],
  ];

  if (!empty($element['fids']['#value'])) {
    $file = reset($element['#files']);
    $element['file_' . $file->id()]['filename']['#suffix'] = ' <span class="file-size">(' . format_size($file->getSize()) . ')</span> ';
    $file_variables = [
      'style_name' => $element['#preview_image_style'],
      'uri' => $file->getFileUri(),
    ];

    // Determine image dimensions.
    if (isset($element['#value']['width']) && isset($element['#value']['height'])) {
      $file_variables['width'] = $element['#value']['width'];
      $file_variables['height'] = $element['#value']['height'];
    }
    else {
      $image = \Drupal::service('image.factory')->get($file->getFileUri());
      if ($image->isValid()) {
        $file_variables['width'] = $image->getWidth();
        $file_variables['height'] = $image->getHeight();
      }
      else {
        $file_variables['width'] = $file_variables['height'] = NULL;
      }
    }

    $element['preview'] = [
      '#weight' => -10,
      '#theme' => 'image_style',
      '#width' => $file_variables['width'],
      '#height' => $file_variables['height'],
      '#style_name' => $file_variables['style_name'],
      '#uri' => $file_variables['uri'],
    ];

    // Store the dimensions in the form so the file doesn't have to be
    // accessed again. This is important for remote files.
    $element['width'] = [
      '#type' => 'hidden',
      '#value' => $file_variables['width'],
    ];
    $element['height'] = [
      '#type' => 'hidden',
      '#value' => $file_variables['height'],
    ];
  }

  $variables['data'] = [];
  foreach (Element::children($element) as $child) {
    $variables['data'][$child] = $element[$child];
  }
}
