<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\CloseModalDialogCommand;
use Drupal\Component\Serialization\Json;
use Drupal\Core\Url;

function convert_date_in_tags($string, $tagname)
{
//            recupère le pattern de date dans la chaine
    $pattern = "#<\s*?$tagname\b[^>]*>(.*?)</$tagname\b[^>]*>#s";
    preg_match($pattern, $string, $matches);
    if ($matches) {
        $strippedDate = strip_tags($matches[0]);

        //            Converti au format date

        $datePrefix = date($strippedDate);
    } else {
        $datePrefix = "";
    }
//            Replace la date convertie dans la chaine
    $replacedPrefix = preg_replace($pattern, $datePrefix, $string);
    return $replacedPrefix;
}

/**
 * Implements hook_form_alter().
 */
function facture_form_alter(array &$form, FormStateInterface &$form_state, $form_id)
{
//drupal_set_message($form_id);

//Formulaire de création
    if ($form_id == 'node_invoice_form') {
//        $form['#attached']['library'][] = 'facture/facture_form';

//
        $configuration = \Drupal::service('config.factory')->get("facture.config");

        $facture_tva_default = $configuration->get("facture_tva_default");
        $facture_devise_default = $configuration->get("facture_devise_default");
        $facture_penality_rate_default = $configuration->get("facture_penality_rate_default");
        $facture_limit_date_default = strtotime($configuration->get("facture_limit_date_default"));
        $facture_zeroFill = $configuration->get("facture_zerofill");
        $facture_zeroFill = sprintf("%0" . $facture_zeroFill . "d", '1');

        $facture_number_prefix = $configuration->get("facture_number_prefix");

        $prefix = convert_date_in_tags($facture_number_prefix, 'date');

//        Chargement des valeurs dans le formulaire
//        $form['field_facture_item']['widget'][0]['subform']['field_tva']["widget"][0]['value']['#default_value'] = $facture_tva_default;
        $form['field_devise']["widget"][0]['value']['#default_value'] = $facture_devise_default;
        $form['field_penality_rate']["widget"][0]['value']['#default_value'] = $facture_penality_rate_default;
        $form['field_date_penalite']["widget"][0]['value']['#default_value'] = Drupal\Core\Datetime\DrupalDateTime::createFromTimestamp($facture_limit_date_default);
        $form['field_invoice_number']["widget"][0]['value']['#default_value'] = $prefix . $facture_zeroFill;

    }
//Formulaire d'edition
//    if ($form_id == 'node_invoice_edit_form') {
////        $form['#attached']['library'][] = 'facture/facture_form';
////                dump($form);die;
//    }

    if ($form_id == 'client_add_form' or $form_id == 'entreprise_add_form') {
        //Check if the form is display in a modal
        $modal = \Drupal::request()->get('modal');
        if ($modal) {
            $form['#prefix'] = '<div id="modal-form">';
            $form['#suffix'] = '</div>';
            $form['status_messages'] = [
                '#type' => 'status_messages',
                '#weight' => -10,
            ];

            $form['actions']['submit']['#submit'][] = '_modal_form_example_ajax_submit';
            $form['actions']['submit']['#attributes']['class'][] = 'use-ajax-submit';
            $form['actions']['submit']['#default_value'] = 'use-ajax-submit';
        }
    }

}

/**
 * Close the Modal and redirect to the parent page.
 *
 * @param array $form
 *   The form that will be altered.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   FormState Object.
 */
function _modal_form_example_ajax_submit(array $form, FormStateInterface &$form_state) {
    $response = new AjaxResponse();
    $response->addCommand(new CloseModalDialogCommand());
    $form_state->setResponse($response);
}

/**
 * Implements hook_theme().
 */
function facture_theme($existing, $type, $theme, $path)
{
    return array(
        'node__invoice__full' => array(
            'template' => 'node--invoice--full',
            'base hook' => 'node',
            'variables' => array(),
        ),
    );
}

function facture_preprocess_node__invoice(&$variables)
{
    $view_mode = $variables['view_mode'];
    if ($view_mode == 'full') {
        $variables['#attached']['library'][] = 'facture/facture_full';
    }

    $node = $variables['node'];

    $variables['devise'] = $node->field_devise->value;
    $variables['remise_montant'] = $node->field_remise_montant->value;
    $variables['facture_item'] = $node->field_facture_item;
    $variables['acompte'] = $node->field_acompte->value;
    $variables['montant_total_ht'] = $node->field_montant_total_ht->value;
    $variables['montant_total_tva'] = $node->field_montant_total_tva->value;
    $variables['montant_total_ttc'] = $node->field_montant_total_ttc->value;
    $variables['invoice_netapayer'] = $node->field_invoice_netapayer->value;
    $variables['entreprise_name'] = $node->field_entreprise['0']->entity->name->value;
    $variables['entreprise_adresse'] = $node->field_entreprise['0']->entity->field_adresse->value;
    $variables['entreprise_code_postal'] = $node->field_entreprise['0']->entity->field_code_postal->value;
    $variables['entreprise_ville'] = $node->field_entreprise['0']->entity->field_ville->value;
    $variables['entreprise_iban'] = $node->field_entreprise['0']->entity->field_iban->value;
    $variables['entreprise_siret'] = $node->field_entreprise['0']->entity->field_siret->value;
    $variables['entreprise_ape'] = $node->field_entreprise['0']->entity->field_code_ape->value;
    $variables['entreprise_tva'] = $node->field_entreprise['0']->entity->field_tva->value;
    $variables['entreprise_rcs'] = $node->field_entreprise['0']->entity->field_rcs->value;
}


function facture_entity_presave(Drupal\Core\Entity\EntityInterface $entity)
{
    //Lors de l'enregistrement d'une facture
    //Calcul et enregistre le montant total HT
    //Calcul et enregistre le montant total TTC
    //Calcul et enregistre le montant total TVA
    //Génère le titre de la facture avec le numéro
    if ($entity instanceof NodeInterface) {
        if ($entity->bundle() == 'invoice') {
            // Ajout des valeurs calculés
            $montantTotalHt = '0';
            $montantTotalTtc = '0';
            $montantTotalTva = '0';
            $montantTotalRemise = '0';
            foreach ($entity->get('field_facture_item')->referencedEntities() as $item) {
//                dump($item->field_total_item_ht->value);die;
                $totalItemHt = $item->field_total_item_ht->value;
                $montantTotalHt += $totalItemHt;
                $totalItemTtc = $item->field_total_item_ttc->value;
                $montantTotalTtc += $totalItemTtc;
                $totalItemTva = $item->field_total_item_tva->value;
                $montantTotalTva += $totalItemTva;
                $totalItemRemise = $item->field_total_item_remise->value;
                $montantTotalRemise += $totalItemRemise;
            }


            $acompte = $entity->field_acompte->value;
            $netapayer = $montantTotalTtc - $acompte;

//            Renvoi des données calculées pour l'enregistrement
            if ($montantTotalRemise == 0) {
                $montantTotalRemise = "";
            }

            $entity->field_remise_montant->value = $montantTotalRemise;
            $entity->field_montant_total_ht->value = $montantTotalHt;
            $entity->field_montant_total_tva->value = $montantTotalTva;
            $entity->field_montant_total_ttc->value = $montantTotalTtc;
            $entity->field_invoice_netapayer->value = $netapayer;

            //Génération du titre de la facture avec le numero de facture
            $fieldInvoiceNumber = $entity->field_invoice_number->value;
            $entity->title->value = "Facture " . $fieldInvoiceNumber;

        }
    }
    //Lors de l'enregistrement d'un Facture Item
    //Calcul et enregistre le total Item HT
    //Calcul et enregistre le total Item TVA
    //Calcul et enregistre le total Item TTC
    if ($entity->bundle() == 'facture_item') {

        $prixUnitaireHt = $entity->field_prix_unitaire_ht->value;
        $quantite = $entity->field_quantite->value;
        $tvaRate = $entity->field_tva->value;
        $remiseRate = $entity->field_remise->value;
        $montantRemiseItem = ($prixUnitaireHt * $remiseRate) / 100;
        $prixUnitaireHt = $prixUnitaireHt - $montantRemiseItem;


        if ($remiseRate) {
            $totalItemRemise = $montantRemiseItem * $quantite;
        } else {
            $totalItemRemise = '';
        }
//                dump($totalItemRemise);die;

        $totalItemHt = $prixUnitaireHt * $quantite;
        $totalItemTva = ($totalItemHt * $tvaRate) / 100;
        $totalItemTtc = $totalItemHt + $totalItemTva;

        // Renvoi des données pour l'enregistrement
        $entity->field_total_item_remise->value = $totalItemRemise;
        $entity->field_total_item_ht->value = $totalItemHt;
        $entity->field_total_item_tva->value = $totalItemTva;
        $entity->field_total_item_ttc->value = $totalItemTtc;
    }
}


