<?php

/**
 * @file
 * The module that define and maintain QuickCodes for business object.
 */

use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_theme().
 */
function quick_code_theme($existing, $type, $theme, $path) {
  return [
    'quick_code_tree' => [
      'variables' => ['items' => [], 'attributes' => []],
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK() for views_view_table.
 */
function quick_code_preprocess_views_view_table(&$variables) {
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $variables['view'];

  if ($view->getBaseEntityType()->id() == 'quick_code') {
    $today = new DrupalDateTime('now', DATETIME_STORAGE_TIMEZONE);
    $today = $today->format(DATETIME_DATE_STORAGE_FORMAT);
    foreach ($variables['result'] as $key => $row) {
      $entity = $row->_entity;
      $classes = [];
      $effective = true;
      if (!empty($value = $entity->effective_dates->value)) {
        if ($today < $value) {
          $effective = false;
          $classes[] = 'future-effective';
        }
      }
      if (!empty($end_value = $entity->effective_dates->end_value)) {
        if ($end_value <= $today) {
          $effective = false;
        }
        else {
          $classes[] = 'future-invalid';
        }
      }

      if ($effective) {
        $classes[] = 'effective';
      }
      else {
        $classes[] = 'invalid';
      }

      $variables['rows'][$key]['attributes']->addClass($classes);
    }

    $variables['view']->element['#attached']['library'][] = 'quick_code/views_view_table';
  }
}

/**
 * Implements hook_views_pre_build().
 */
function quick_code_views_pre_build(ViewExecutable $view) {
  if ($view->id() == 'quick_code') {
    /** @var \Drupal\quick_code\QuickCodeTypeInterface $type */
    if ($type = \Drupal::entityTypeManager()->getStorage('quick_code_type')->load($view->args[0])) {
      $fields = [];
      if (!$type->getCode()) {
        $fields[] = 'code';
      }
      if (!$type->getHierarchy()) {
        $fields[] = 'parent';
      }
      foreach ($fields as $field) {
        unset($view->field[$field]);
        unset($view->display_handler->handlers['field'][$field]);
      }
    }
  }
}
