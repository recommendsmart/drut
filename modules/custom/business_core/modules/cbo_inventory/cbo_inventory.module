<?php

/**
 * @file
 * This module manages organization subinventorys.
 */

use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Database\Query\SelectInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_entity_base_field_info().
 */
function cbo_inventory_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'organization') {
    $fields = [];

    $fields['inventory_organization'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Inventory Organization'))
      ->setDescription(t('Whether this organization is a inventory organization.'))
      ->setDefaultValue(FALSE)
      ->setDisplayOptions('view', [
        'type' => 'boolean',
        'weight' => 0,
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'boolean_checkbox',
        'weight' => 0,
      ])
      ->setDisplayConfigurable('form', TRUE);

    return $fields;
  }
  elseif ($entity_type->id() == 'item') {
    $fields = [];

    $fields['inventory_item'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Inventory Item'))
      ->setDescription(t('Enable to stock and transact this item in Inventory.'))
      ->setDisplayOptions('view', [
        'type' => 'boolean',
        'weight' => 0,
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'boolean_checkbox',
        'weight' => 0,
      ])
      ->setDisplayConfigurable('form', TRUE);

    $fields['stockable'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Stockable'))
      ->setDescription(t('Enable to stock the item in Inventory.'))
      ->setDisplayOptions('view', [
        'type' => 'boolean',
        'weight' => 0,
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'boolean_checkbox',
        'weight' => 0,
      ])
      ->setDisplayConfigurable('form', TRUE);

    $fields['serial_generation'] = BaseFieldDefinition::create('list_string')
      ->setLabel(t('Serial Generation'))
      ->setRequired(TRUE)
      ->setSetting('allowed_values', [
        'no_control' => 'No control',
        'at_receipt' => 'At Receipt: Create and assign serial numbers when receive the item',
        'at_sales_order_issue' => 'At Sales Order Issue: Create and assign serial numbers when issue the item against a sales order',
        'predefined' => 'Predefined: Assign predefined serial numbers when receive the item',
      ])
      ->setDefaultValue('no_control')
      ->setDisplayOptions('view', [
        'type' => 'list_default',
        'weight' => 0,
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'options_select',
        'weight' => 0,
      ])
      ->setDisplayConfigurable('form', TRUE);

    $fields['restrict_subinventories'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Restrict Subinventories'))
      ->setDescription(t('Whether to restrict transactions of this item to or from a subinventory list.'))
      ->setDisplayOptions('view', [
        'type' => 'boolean',
        'weight' => 0,
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'boolean_checkbox',
        'weight' => 0,
      ])
      ->setDisplayConfigurable('form', TRUE);

    $fields['subinventories'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Subinventories'))
      ->setSetting('target_type', 'subinventory')
      ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)
      ->setDisplayOptions('view', [
        'type' => 'entity_reference_label',
        'weight' => -3,
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'inline_entity_form_complex',
        'weight' => 0,
        'settings' => [
          'form_mode' => 'default',
          'allow_new' => FALSE,
          'allow_existing' => TRUE,
          'match_operator' => 'CONTAINS',
        ],
      ])
      ->setDisplayConfigurable('form', TRUE);

    return $fields;
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for item_form.
 */
function cbo_inventory_form_item_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['inventory_group'] = [
    '#type' => 'details',
    '#group' => 'advanced',
    '#title' => t('Inventory'),
  ];
  if (isset($form['inventory_item'])) {
    $form['inventory_item']['#group'] = 'inventory_group';
  }
  if (isset($form['stockable'])) {
    $form['stockable']['#group'] = 'inventory_group';
    $form['stockable']['#states'] = [
      'visible' => [
        'input[name="inventory_item[value]"]' => ['checked' => TRUE],
      ],
    ];
  }

  if ($form['serial_generation']) {
    $form['serial_generation']['#group'] = 'inventory_group';
    $form['serial_generation']['#states'] = [
      'visible' => [
        'input[name="inventory_item[value]"]' => ['checked' => TRUE],
      ],
    ];
  }

  $form['subinventories_group'] = [
    '#type' => 'details',
    '#group' => 'inventory_group',
    '#title' => t('Subinventories'),
    '#states' => [
      'visible' => [
        'input[name="inventory_item[value]"]' => ['checked' => TRUE],
      ],
    ],
  ];
  if ($form['restrict_subinventories']) {
    $form['restrict_subinventories']['#group'] = 'subinventories_group';
  }
  if ($form['subinventories']) {
    $form['subinventories']['#group'] = 'subinventories_group';
    $form['subinventories']['#states'] = [
      'visible' => [
        'input[name="restrict_subinventories[value]"]' => ['checked' => TRUE],
      ],
    ];
  }
}

/**
 * Implements hook_ENTITY_TYPE_create() for item.
 */
function cbo_inventory_item_create(EntityInterface $entity) {
  /** @var \Drupal\cbo_item\Entity\ItemType $type */
  $type = $entity->get('type')->entity;
  if ($type->getThirdPartySetting('cbo_inventory', 'inventory_item')) {
    $entity->set('inventory_item', TRUE);
  }
}

/**
 * Implements hook_query_TAG_alter() for subinventory_access.
 */
function cbo_inventory_query_subinventory_access_alter(AlterableInterface $query) {
  // Read meta-data from query, if provided.
  if (!$account = $query->getMetaData('account')) {
    $account = \Drupal::currentUser();
  }

  if ($account->hasPermission('bypass subinventory access')) {
    return;
  }

  if ($organization = \Drupal::service('inventory.manager')->currentInventoryOrganization()) {
    $tables = $query->getTables();

    $alias = 'subinventory';
    foreach ($tables as $table_info) {
      if (!($table_info instanceof SelectInterface)) {
        if ($table_info['table'] == 'subinventory') {
          $alias = $table_info['alias'];
          break;
        }
      }
    }

    $query->condition($alias . '.organization', $organization->id());
    return;
  }
  else {
    $query->condition("1", "2");
  }
}
