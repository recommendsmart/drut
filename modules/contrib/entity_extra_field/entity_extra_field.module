<?php

/**
 * @file
 * The hook implementation for the entity extra field module.
 */

use Drupal\Core\Entity\ContentEntityFormInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Url;
use Drupal\entity_extra_field\Entity\EntityExtraFieldInterface;

/**
 * Implements hook_entity_extra_field_info().
 */
function entity_extra_field_entity_extra_field_info() {
  $field_info = [];

  foreach (entity_extra_field_storage()->loadMultiple() as $extra_field) {
    if (!$extra_field instanceof EntityExtraFieldInterface) {
      continue;
    }
    $display_type = $extra_field->getDisplayType();

    if (!in_array($display_type, ['view', 'form'])) {
      continue;
    }
    $display_type = $display_type === 'view' ? 'display' : $display_type;

    $field_name = $extra_field->name();
    $entity_type_id = $extra_field->getBaseEntityTypeId();
    $entity_bundle_id = $extra_field->getBaseBundleTypeId();

    $field_info[$entity_type_id][$entity_bundle_id][$display_type][$field_name] = [
      'label' => $extra_field->label(),
      'description' => $extra_field->description(),
      'weight' => 0
    ];
  }

  return $field_info;
}

/**
 * Implements hook_entity_view().
 */
function entity_extra_field_entity_view(
  array &$build,
  \Drupal\Core\Entity\EntityInterface $entity,
  \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display,
  $view_mode
) {
  entity_extra_field_display('view', $build, $entity, $display);
}

/**
 * Implements hook_form_alter().
 */
function entity_extra_field_form_alter(
  &$form,
  \Drupal\Core\Form\FormStateInterface $form_state,
  $form_id
) {
  $form_object = $form_state->getFormObject();

  if (!$form_object instanceof ContentEntityFormInterface) {
    return;
  }
  $entity = $form_object->getEntity();
  $display = $form_object->getFormDisplay($form_state);

  entity_extra_field_display('form', $form, $entity, $display);
}

/**
 * Implements hook_theme().
 */
function entity_extra_field_theme($existing, $type, $theme, $path) {
  return [
    'entity_extra_field' => [
      'render element' => 'element',
      'path' => $path . '/templates',
      'file' => 'entity_extra_field.theme',
      'template' => 'entity-extra-field'
    ]
  ];
}

/**
 * Entity extra field display.
 *
 * @param $type
 *   The display type, (e.g. view, form).
 * @param $build
 *   An array of elements to attach the extra field.
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   An entity instance.
 * @param \Drupal\Core\Entity\Display\EntityDisplayInterface $display
 *   An entity display instance.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function entity_extra_field_display(
  $type,
  &$build,
  \Drupal\Core\Entity\EntityInterface $entity,
  \Drupal\Core\Entity\Display\EntityDisplayInterface $display
) {
  $storage = entity_extra_field_storage();

  $extra_field_ids = $storage->getQuery()
    ->condition('display.type', $type)
    ->condition('base_bundle_type_id', $entity->bundle())
    ->condition('base_entity_type_id', $entity->getEntityTypeId())
    ->execute();

  if (!empty($extra_field_ids)) {
    $extra_fields = $storage->loadMultiple(array_values($extra_field_ids));

    /** @var \Drupal\entity_extra_field\Entity\EntityExtraField $extra_field */
    foreach ($extra_fields as $extra_field) {
      if (!$extra_field instanceof EntityExtraFieldInterface
        || !entity_extra_field_has_component($extra_field, $display)) {
        continue;
      }
      $build[$extra_field->name()] = $extra_field->build($entity, $display);
      $build[$extra_field->name()]['#cache']['tags'] = [
        'entity_extra_field',
        "entity_extra_field:{$type}.{$entity->getEntityTypeId()}.{$entity->bundle()}"
      ];
    }
  }
}

/**
 * Implements hook_entity_operation().
 */
function entity_extra_field_entity_operation(
  \Drupal\Core\Entity\EntityInterface $entity
) {
  $operations = [];

  if (entity_extra_field_entity_has_field_ui($entity)) {
    $account = \Drupal::currentUser();
    $entity_type = $entity->getEntityType();
    $base_entity_type_id = $entity_type->getBundleOf();

    if ($account->hasPermission('administer entity extra field')) {
      $operations['manage-extra-fields'] = [
        'title' => t('Manage extra fields'),
        'weight' => 17,
        'url' => Url::fromRoute(
          "entity.{$base_entity_type_id}.extra_fields",
          [$entity->getEntityTypeId() => $entity->id()]
        ),
      ];
    }
  }

  return $operations;
}

/**
 * Entity has field UI.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   An entity to check if a field UI exist.
 *
 * @return bool
 *   Return TRUE if the entity has field UI; otherwise FALSE.
 *
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function entity_extra_field_entity_has_field_ui(
  \Drupal\Core\Entity\EntityInterface $entity
) {
  $entity_type = $entity->getEntityType();

  if (!$entity_type instanceof EntityTypeInterface
    || $entity_type->getBundleOf() === NULL) {
    return FALSE;
  }
  $definition = \Drupal::entityTypeManager()
    ->getDefinition($entity_type->getBundleOf());

  if ($definition->get('field_ui_base_route') === NULL) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Extra field has component.
 *
 * @param \Drupal\entity_extra_field\Entity\EntityExtraField $extra_field
 *   An extra field instance.
 * @param \Drupal\Core\Entity\Display\EntityDisplayInterface $display
 *   An entity display to check for the extra field.
 *
 * @return bool
 *   Return TRUE if extra field has a component in the display; otherwise FALSE.
 */
function entity_extra_field_has_component(
  \Drupal\entity_extra_field\Entity\EntityExtraField $extra_field,
  \Drupal\Core\Entity\Display\EntityDisplayInterface $display
) {
  return $display->getComponent($extra_field->name()) !== NULL;
}

/**
 * Get entity extra field storage.
 *
 * @return \Drupal\Core\Entity\EntityStorageInterface
 *   The entity extra field storage.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function entity_extra_field_storage() {
  return \Drupal::entityTypeManager()->getStorage('entity_extra_field');
}
