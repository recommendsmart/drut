<?php

/**
 * @file
 * Module related hook implementations for the contacts module.
 */

use Drupal\commerce_order\Form\OrderForm;
use Drupal\Component\Plugin\PluginBase;
use Drupal\Component\Render\FormattableMarkup;
use Drupal\Component\Utility\Html;
use Drupal\contacts\Dashboard;
use Drupal\contacts\Form\ContactsProfileForm;
use Drupal\contacts\Form\RegisterForm;
use Drupal\contacts\Plugin\Block\ContactsEntity;
use Drupal\contacts\Plugin\DashboardBlockInterface;
use Drupal\contacts\Plugin\facets\url_processor\StatefulQuerystringUrlProcessor;
use Drupal\contacts\Plugin\Field\EntityLabelItemList;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Render\Element;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\decoupled_auth\DecoupledAuthUserInterface;
use Drupal\search_api\Query\QueryInterface;
use Drupal\user\RoleInterface;
use Drupal\user\UserInterface;
use Drupal\views\Plugin\views\cache\CachePluginBase;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_theme().
 */
function contacts_theme() {
  return [
    'contacts_dash_tabs' => [
      'variables' => ['tabs' => [], 'contact' => NULL, 'manage_mode' => NULL],
      'template' => 'contacts-dash-tabs',
    ],
    'contacts_dash_summary' => [
      'variables' => ['user' => NULL],
      'template' => 'contacts-dash-summary',
    ],
    'user__contacts_dashboard_row' => [
      'base hook' => 'user',
      'template' => 'user--contacts-dashboard-row',
    ],
    'user__contacts_dashboard_row_small' => [
      'base hook' => 'user',
      'template' => 'user--contacts-dashboard-row-small',
    ],
    'contacts_manage_block' => [
      'variables' => [
        'id' => NULL,
        'tab' => NULL,
        'subpage' => NULL,
        'block' => [],
        'attributes' => [],
        'label' => '',
        'description' => '',
      ],
      'template' => 'contacts-manage-block',
    ],
  ];
}

/**
 * Prepares variables for contacts manage blocks.
 *
 * Default template: contacts-manage-block.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - attributes: HTML markup attributes for the content wrapper.
 *   - region_attributes: HTML markup attributes for the content wrapper.
 */
function template_preprocess_contacts_manage_block(array &$variables) {
  $configuration = $variables['block']->getConfiguration();

  list($variables['block_plugin'], $variables['identifier']) = explode(PluginBase::DERIVATIVE_SEPARATOR, $variables['id'], 2);

  $variables['attributes']['data-contacts-manage-block-name'] = $configuration['name'];
  $variables['attributes']['data-contacts-manage-block-tab'] = $variables['tab']->id();

  $variables['label'] = $variables['label'] ?: $variables['block']->label(FALSE);
  $variables['content']['description'] = [
    '#type' => 'html_tag',
    '#tag' => 'strong',
    '#value' => $variables['description'],
    '#prefix' => '<div>',
    '#suffix' => '</div>',
  ];

  if ($variables['block'] instanceof DashboardBlockInterface) {
    $variables['block']->processManageMode($variables);
  }

  // UI icons for manage mode.
  $variables['ui'] = [
    'drag' => [
      '#type' => 'open_iconic',
      '#size' => '20',
      '#icon' => 'move',
      '#fill' => '#000',
      '#color' => 'transparent',
      '#attributes' => ['class' => ['contacts-ui-icon', 'icon-left']],
    ],
    'configure' => [
      '#type' => 'open_iconic',
      '#size' => '20',
      '#icon' => 'cog',
      '#fill' => '#5bc0de',
      '#color' => 'transparent',
      '#attributes' => ['class' => ['contacts-ui-icon', 'icon-right']],
    ],
  ];

  $variables['attributes'] = new Attribute($variables['attributes']);
}

/**
 * Prepares variables for contact dashboard tabs.
 *
 * Default template: contacts-dash-tabs.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - attributes: HTML markup attributes for the content wrapper.
 *   - tabs: Associative array of tabs and tab properties.
 */
function template_preprocess_contacts_dash_tabs(array &$variables) {
  $variables['attributes'] = [
    'class' => [
      'contacts-ajax-tabs',
      'tabs',
    ],
  ];

  foreach ($variables['tabs'] as $tab_id => &$tab) {
    if ($variables['manage_mode']) {
      $tab['drag'] = [
        '#type' => 'open_iconic',
        '#size' => '15',
        '#icon' => 'move',
        '#color' => 'transparent',
        '#fill' => '#000',
        '#attributes' => [
          'class' => ['mr-1', 'drag-handle'],
        ],
      ];

      $tab['edit'] = [
        '#type' => 'open_iconic',
        '#size' => '15',
        '#icon' => 'cog',
        '#color' => 'transparent',
        '#fill' => '#5bc0de',
        '#attributes' => [
          'class' => ['use-ajax', 'mr-2'],
          'data-ajax-url' => Url::fromRoute('contacts.tab.off_canvas_form',
            [
              'tab' => $tab_id,
            ]
          )->toString(),
          'data-dialog-type' => 'dialog',
          'data-dialog-renderer' => 'off_canvas',
        ],
      ];
    }
    $tab['attributes'] = !empty($tab['attributes']) ? new Attribute($tab['attributes']) : new Attribute();
    $tab['link_attributes'] = !empty($tab['link_attributes']) ? new Attribute($tab['link_attributes']) : new Attribute();
  }
}

/**
 * Prepares variables for contact tab content.
 *
 * Default template: contact-tab-content.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - attributes: HTML markup attributes for the content wrapper.
 *   - region_attributes: HTML markup attributes for the content wrapper.
 */
function template_preprocess_contact_tab_content(array &$variables) {
  $variables['region_attributes'] = new Attribute($variables['region_attributes']);
}

/**
 * Prepares variables for contact dashboard summary block.
 *
 * Default template: contacts-dash-summary.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - attributes: HTML markup attributes for the content wrapper.
 *   - user: Fully loaded drupal User object.
 *   - crm_indiv: Boolean whether contact has an indiv profile.
 *   - crm_org: Boolean whether contact has an org profile.
 */
function template_preprocess_contacts_dash_summary(array &$variables) {
  /* @var \Drupal\decoupled_auth\Entity\DecoupledAuthUser $user */
  $user = $variables['user'];

  $image_display = [
    'label' => 'hidden',
    'type' => 'image',
    'settings' => [
      'image_style' => 'contacts_small',
    ],
  ];
  $default_image_element = [
    '#theme' => 'image_style',
    '#style_name' => $image_display['settings']['image_style'],
    '#width' => 100,
    '#height' => 100,
    '#attributes' => [],
  ];

  $variables['image'] = $user->user_picture[0] ? $user->user_picture[0]->view($image_display) : '';

  if ($user->getEmail()) {
    $email = $user->getEmail();
    $variables['email'] = Link::fromTextAndUrl($email, Url::fromUri('mailto:' . $email));
  }

  $variables['name'] = $user->getDisplayName();
  $route_name = \Drupal::moduleHandler()->moduleExists('contacts_user_dashboard') ?
    'contacts_user_dashboard.summary' :
    'entity.user.canonical';
  $variables['user_dashboard'] = Link::createFromRoute(new TranslatableMarkup('View user dashboard'), $route_name, ['user' => $user->id()], ['attributes' => ['target' => '_blank']]);

  // For individuals.
  if ($user->hasRole('crm_indiv')) {
    if ($profile = $user->profile_crm_indiv->entity) {
      if ($profile->crm_phone->value) {
        $variables['phone'] = $profile->crm_phone->value;
      }
      if ($profile->crm_dob[0]) {
        $variables['dob'] = $profile->crm_dob[0]->view([
          'label' => 'hidden',
          'settings' => [
            'format_type' => 'html_date',
          ],
        ]);
      }

      // If user has a picture on their profile, use this instead
      // of the user_picture field.
      if ($profile->hasField('crm_photo') && $profile->crm_photo->target_id) {
        $variables['image'] = $profile->crm_photo->view($image_display);
      }
    }
    if (empty($variables['image'])) {
      $variables['image'] = $default_image_element;
      $variables['image']['#uri'] = 'contacts://images/default-indiv.png';
    }
  }
  // For organisations.
  elseif ($user->hasRole('crm_org')) {
    if ($profile = $user->profile_crm_org->entity) {
      if ($profile->crm_phone->value) {
        $variables['phone'] = $profile->crm_phone->value;
      }

      // If user has an image on their profile, use this instead of the
      // user_picture field.
      if ($profile->hasField('org_image') && $profile->org_image->target_id) {
        $variables['image'] = $profile->org_image->view($image_display);
      }
    }

    if (empty($variables['image'])) {
      $variables['image'] = $default_image_element;
      $variables['image']['#uri'] = 'contacts://images/default-org.png';
    }
  }
  // Assume this is a web account, so give some indiv like features.
  else {
    if (empty($variables['image'])) {
      $variables['image'] = $default_image_element;
      $variables['image']['#uri'] = 'contacts://images/default-indiv.png';
    }
  }

  // Render user roles in summary block.
  $roles = user_roles();
  uasort($roles, 'contacts_sort_roles');
  $roles = array_intersect(array_keys($roles), $user->getRoles());
  $variables['hats'] = [];

  foreach ($roles as $role) {
    $variables['hats'][] = [
      '#theme' => 'crm_tools_hat',
      '#role' => $role,
    ];
  }

}

/**
 * Pre render callback for dashboard blocks to add edit link to title.
 *
 * @param array $element
 *   The block render array.
 *
 * @return array
 *   The block render array.
 */
function contacts_dashboard_block_edit_link_pre_render(array $element) {
  $link = $element['#dashboard_label_edit_link'] ?? FALSE;
  if ($link) {
    if ($element['content']['#title']) {
      $element['content']['#title'] = new FormattableMarkup('@label [@link]', [
        '@label' => $element['content']['#title'],
        '@link' => $link->toString(),
      ]);
    }
    else {
      $element['content']['#title'] = $link->toString();
    }
  }
  return $element;
}

/**
 * Implements hook_entity_type_build().
 *
 * Add contacts dashboard form operation to profile entity.
 */
function contacts_entity_type_build(array &$entity_types) {
  /* @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  $entity_types['profile']->setFormClass('default', ContactsProfileForm::class);
  $entity_types['profile']->setFormClass('contacts_dashboard', ContactsProfileForm::class);

  $entity_types['user']->setFormClass('register', RegisterForm::class);
}

/**
 * Implements hook_ENTITY_TYPE_insert() for profile_type.
 *
 * Set up entity displays for contacts dashboard.
 */
function contacts_profile_type_insert($entity) {
  $entity_type_manager = \Drupal::entityTypeManager();

  // If we don't have the view mode, don't do anything.
  if (!$entity_type_manager->getStorage('entity_view_mode')->load('contacts_dashboard')) {
    return;
  }

  /* @var \Drupal\profile\Entity\ProfileTypeInterface $entity */
  $view_storage = $entity_type_manager->getStorage('entity_view_display');
  $form_storage = $entity_type_manager->getStorage('entity_form_display');

  $values = [
    'id' => implode('.', ['profile', $entity->id(), 'contacts_dashboard']),
    'targetEntityType' => 'profile',
    'bundle' => $entity->id(),
    'mode' => 'contacts_dashboard',
    'status' => TRUE,
  ];

  if (!$view_storage->load($values['id'])) {
    $view_display = $view_storage->create($values);
    $view_display->save();
  }
  if (!$form_storage->load($values['id'])) {
    $form_display = $form_storage->create($values);
    $form_display->save();
  }
}

/**
 * Implements hook_ENTITY_TYPE_update() for profile.
 */
function contacts_profile_insert(EntityInterface $entity) {
  \Drupal::service('contacts.indexer')->profilePostSave($entity);
}

/**
 * Implements hook_ENTITY_TYPE_insert() for profile.
 */
function contacts_profile_update(EntityInterface $entity) {
  \Drupal::service('contacts.indexer')->profilePostSave($entity);
}

/**
 * Implements hook_ENTITY_TYPE_delete() for profile.
 */
function contacts_profile_delete(EntityInterface $entity) {
  \Drupal::service('contacts.indexer')->profilePostSave($entity);
}

/**
 * Implements hook_entity_field_access().
 */
function contacts_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL) {
  if ($operation == 'view' && $field_definition->getName() == 'mail' && $field_definition->getTargetEntityTypeId() == 'user') {
    return AccessResult::allowedIfHasPermission($account, 'view contacts');
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_user_access().
 */
function contacts_user_access(UserInterface $user, $operation, AccountInterface $account) {
  // Allow users to view blocked user accounts if they can view contacts.
  // The only other way to view blocked accounts is using `administer users`
  // permission which is overkill for some cases.
  if ($operation == 'view' && $user->isBlocked()) {
    return AccessResult::allowedIfHasPermission($account, 'view contacts');
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_ENTITY_TYPE_insert() for user.
 */
function contacts_user_insert(EntityInterface $entity) {
  \Drupal::service('contacts.indexer')->indexImmediately($entity, TRUE);
}

/**
 * Implements hook_toolbar().
 *
 * Add contacts manage icon css to toolbar.
 */
function contacts_toolbar() {
  $items = [];
  $items['contacts_manage'] = [
    '#cache' => [
      'contexts' => [
        'user.permissions',
        'route.name',
      ],
    ],
  ];

  if (!\Drupal::service('contacts.dashboard')->isDashboard()) {
    return $items;
  }

  if (!\Drupal::currentUser()->hasPermission('manage contacts dashboard')) {
    return $items;
  }

  $items['contacts_manage'] += [
    '#type' => 'toolbar_item',
    'tab' => [
      '#type' => 'html_tag',
      '#tag' => 'button',
      '#value' => t('Manage Dashboard'),
      '#attributes' => [
        'class' => [
          'toolbar-icon',
          'toolbar-icon-edit',
          'toolbar-dashboard-manage',
        ],
        'aria-pressed' => 'false',
        'type' => 'button',
      ],
    ],
    'tray' => [],
    '#wrapper_attributes' => [
      'class' => [
        'contacts-toolbar-tab',
      ],
    ],
    '#attached' => [
      'library' => [
        'contacts/dashboard.manage',
        'crm_tools/open-iconic',
      ],
    ],
  ];
  $path = \Drupal::moduleHandler()->getModule('crm_tools')->getPath();
  $items['contacts_manage']['#attached']['drupalSettings']['contacts']['openIconic']['path'] = '/' . $path . '/includes/open-iconic.svg';

  return $items;
}

/**
 * Implements hook_toolbar_alter().
 *
 * Add contacts icon css to toolbar.
 */
function contacts_toolbar_alter(&$items) {
  // Move the User tab to the right.
  $items['administration']['#attached']['library'][] = 'contacts/contacts.toolbar';
}

/**
 * Implements hook_user_format_name_alter().
 */
function contacts_user_format_name_alter(&$name, AccountInterface $account) {
  if ($account->isAnonymous()) {
    return;
  }

  // Display the name for individuals.
  if (in_array('crm_indiv', $account->getRoles()) && !empty($account->profile_crm_indiv)) {
    $profile = $account->profile_crm_indiv->entity;

    if ($profile) {
      $names = [];
      if ($given = $profile->crm_name->given) {
        $names[] = $given;
      }

      if ($family = $profile->crm_name->family) {
        $names[] = $family;
      }

      if (!empty($names)) {
        $name = implode(' ', $names);
      }
    }
  }

  // Display the name for organisations.
  if (in_array('crm_org', $account->getRoles()) && !empty($account->profile_crm_org)) {
    $profile = $account->profile_crm_org->entity;

    if ($profile) {
      $name = $profile->crm_org_name->value;
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function contacts_theme_suggestions_user(array $variables) {
  $suggestions = [];
  /* @var \Drupal\user\UserInterface $user */
  $user = $variables['elements']['#user'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'user__' . $sanitized_view_mode;
  foreach ($user->getRoles(TRUE) as $role) {
    if (substr($role, 0, 4) == 'crm_') {
      $suggestions[] = 'user__' . $role . '__';
      $suggestions[] = 'user__' . $role . '__' . $sanitized_view_mode;
    }
  }

  return $suggestions;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function contacts_preprocess_user(&$variables) {
  $view_mode = $variables['elements']['#view_mode'];
  $view_modes = [
    'contacts_dashboard_row',
    'contacts_dashboard_row_small',
  ];
  if (!in_array($view_mode, $view_modes)) {
    return;
  }

  /* @var \Drupal\user\UserInterface $user */
  $user = $variables['user'];
  $image_display = [
    'label' => 'hidden',
    'type' => 'image',
    'settings' => [
      'image_style' => $view_mode == 'contacts_dashboard_row' ? 'contacts_small' : 'contacts_tiny',
    ],
  ];
  $default_image_element = [
    '#theme' => 'image_style',
    '#style_name' => $image_display['settings']['image_style'],
    '#width' => 100,
    '#height' => 100,
    '#attributes' => [],
  ];

  // Set some defaults.
  // @todo: Simplify this when we have 'primary fields'.
  $variables['url'] = Url::fromRoute('contacts.contact', [
    'user' => $user->id(),
  ]);
  $variables['label'] = $user->getDisplayName();
  $variables['email'] = $user->getEmail();
  if ($user instanceof DecoupledAuthUserInterface) {
    $variables['web_account'] = $user->isCoupled();
  }
  $variables['image'] = $user->user_picture[0] ? $user->user_picture[0]->view($image_display) : '';
  $variables['address'] = '';

  $roles = user_roles();
  uasort($roles, 'contacts_sort_roles');
  $roles = array_map(function ($item) {
    return $item->label();
  }, $roles);
  $variables['roles'] = implode(', ', array_intersect_key($roles, array_fill_keys($user->getRoles(), TRUE)));

  // For individuals.
  if ($user->hasRole('crm_indiv')) {
    if ($profile = $user->profile_crm_indiv->entity) {
      $variables['profile'] = $profile;
      $variables['address'] = $profile->crm_address->locality;

      // If user has a picture on their profile, use this instead
      // of the user_picture field.
      if ($profile->hasField('crm_photo') && $profile->crm_photo->target_id) {
        $variables['image'] = $profile->crm_photo->view($image_display);
      }
    }
    if (empty($variables['image'])) {
      $variables['image'] = $default_image_element;
      $variables['image']['#uri'] = 'contacts://images/default-indiv.png';
    }
  }
  // For organisations.
  elseif ($user->hasRole('crm_org')) {
    if ($profile = $user->profile_crm_org->entity) {
      $variables['profile'] = $profile;
      $variables['address'] = $profile->crm_org_address->locality;

      // If user has an image on their profile, use this instead of the
      // user_picture field.
      if ($profile->hasField('org_image') && $profile->org_image->target_id) {
        $variables['image'] = $profile->org_image->view($image_display);
      }
    }
    if (empty($variables['image'])) {
      $variables['image'] = $default_image_element;
      $variables['image']['#uri'] = 'contacts://images/default-org.png';
    }
  }
  // Assume this is a web account, so give some indiv like features.
  else {
    if (empty($variables['image'])) {
      $variables['image'] = $default_image_element;
      $variables['image']['#uri'] = 'contacts://images/default-indiv.png';
    }
  }
}

/**
 * Sort roles by CRM then alphabetically.
 *
 * @param \Drupal\user\RoleInterface $a
 *   The first role.
 * @param \Drupal\user\RoleInterface $b
 *   The first role.
 *
 * @return int
 *   The comparison result for uasort().
 */
function contacts_sort_roles(RoleInterface $a, RoleInterface $b) {
  $a_crm = substr($a->id(), 0, 4) == 'crm_';
  $b_crm = substr($b->id(), 0, 4) == 'crm_';
  if ($a_crm xor $b_crm) {
    return $a_crm ? -1 : 1;
  }
  return strnatcmp($a->label(), $b->label());
}

/**
 * Implements hook_preprocess_HOOK().
 */
function contacts_preprocess_views_view_unformatted(&$variables) {
  if ($variables['view']->id() == 'contacts_dashboard_indexed') {
    foreach ($variables['rows'] as $id => &$row) {
      if ($row['content']['#user']) {
        $url = Url::fromRoute('contacts.contact', [
          'user' => $row['content']['#user']->id(),
        ]);
        $row['attributes']->setAttribute('data-row-link', $url->toString());
      }
    }
  }
}

/**
 * Implements hook_views_post_render().
 */
function contacts_views_post_render(ViewExecutable $view, &$output, CachePluginBase $cache) {
  if ($view->id() == 'contacts_dashboard_indexed') {
    $output['#attached']['library'][] = 'contacts/listings';
  }
}

/**
 * Implements hook_entity_type_alter().
 *
 * Update entity definitions of certain entity types to enable contacts Entity
 * blocks and handle missing form operations.
 *
 * @see \Drupal\contacts\Plugin\Deriver\ContactsEntityBlockDeriver::getDerivativeDefinitions()
 */
function contacts_entity_type_alter(array &$entity_types) {
  /* @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
  // Approved entity types.
  $dashboard_entity_types = [
    'user',
    'profile',
  ];

  /* @var \Drupal\Core\Entity\EntityDisplayRepository $entity_display_repository */
  $entity_display_repository = \Drupal::service('entity_display.repository');
  foreach ($dashboard_entity_types as $type) {
    if (isset($entity_types[$type])) {
      $entity_types[$type]->set('contacts_entity', TRUE);
    }

    // Add form operations for missing form modes.
    $form_modes = $entity_display_repository->getFormModes($type);
    foreach ($form_modes as $name => $form_mode) {
      /* @var \Drupal\Core\Entity\Entity\EntityFormMode $form_mode */
      if (!$entity_types[$type]->getFormClass($name)) {
        // Use the default form for form modes that are not explicitly defined.
        $default_handler_class = $entity_types[$type]->getHandlerClasses()['form']['default'];
        $entity_types[$type]->setFormClass($name, $default_handler_class);
      }
    }
  }

  // Expand out separate entity blocks for profile bundles.
  if (isset($entity_types['profile'])) {
    $entity_types['profile']->set('contacts_use_bundles', TRUE);
  }
}

/**
 * Implements hook_preprocess().
 */
function contacts_preprocess_block(&$variables, $hook) {
  if (isset($variables['plugin_id']) && $variables['plugin_id'] == 'local_actions_block') {
    // Some of our local actions use the dialog, so make sure the library is
    // included, as adding it after the modal is rendered (i.e. adding as part
    // of the AJAX request) prevents the z-index being set correctly.
    $variables['#attached']['library'][] = 'core/drupal.dialog.ajax';

    // Do a first pass to alter our group items.
    foreach ($variables['content'] as $plugin_id => $item) {
      if (empty($item['#link']['localized_options']['is_action_group'])) {
        continue;
      }

      $id = Html::getUniqueId(Html::getId('local-action-group-' . str_replace('.', '-', $plugin_id)));

      $group = [
        '#prefix' => '<li class="action-group-wrapper">',
        '#suffix' => '</li>',
        '#is_group' => TRUE,
        '#attributes' => [
          'class' => ['action-group-wrapper'],
        ],
        'button' => [
          '#type' => 'html_tag',
          '#tag' => 'button',
          '#value' => $item['#link']['title'],
          '#attributes' => isset($item['#link']['localized_options']['attributes']) ? $item['#link']['localized_options']['attributes'] : [],
        ],
        'group' => [
          '#type' => 'container',
          '#attributes' => [
            'id' => $id,
            'class' => ['js-hide', 'action-group'],
          ],
          'links' => [
            '#theme' => 'links',
            '#set_active_class' => FALSE,
            '#links' => [],
            '#attributes' => [
              'class' => ['action-group-links'],
            ],
          ],
        ],
        '#attached' => [
          'library' => 'contacts/action.group',
        ],
      ];
      $group['button']['#attributes']['class'][] = 'action-group-control';
      $group['button']['#attributes']['data-action-group'] = $id;
      if (!empty($item['#link']['localized_options']['attributes']['title'])) {
        $group['group']['links']['#heading']['text'] = $item['#link']['localized_options']['attributes']['title'];
      }

      $variables['content'][$plugin_id] = $group;
    }

    // Now pass through and move links into their groups.
    foreach ($variables['content'] as $plugin_id => $action) {
      // Skip inaccessible links.
      if (isset($action['#access']) && !$action['#access']) {
        continue;
      }

      // Ignore anything that isn't in a group.
      if (empty($action['#link']['localized_options']['action_group'])) {
        continue;
      }

      $group_name = $action['#link']['localized_options']['action_group'];
      if (!empty($variables['content'][$group_name]['#is_group'])) {
        // Get our links container.
        $action['#link'] += $action['#link']['localized_options'];
        $variables['content'][$group_name]['group']['links']['#links'][$plugin_id] = $action['#link'];
        unset($variables['content'][$plugin_id]);
      }
    }

    // Now pass over groups and remove any items without links.
    foreach ($variables['content'] as $plugin_id => $item) {
      if (!empty($variables['content'][$plugin_id]['#is_group'])) {
        if (empty($item['group']['links']['#links'])) {
          unset($variables['content'][$plugin_id]);
        }
      }
    }
  }
}

/**
 * Implements hook_link_alter().
 *
 * Convert all dashboard links into AJAX links.
 */
function contacts_link_alter(&$variables) {
  Dashboard::fastHookLinkAlter($variables, 'contacts.dashboard');
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Point the commerce back end forms to Contacts rather that People.
 */
function contacts_form_commerce_order_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form_object = $form_state->getFormObject();
  if (!($form_object instanceof OrderForm)) {
    return;
  }

  /** @var \Drupal\commerce_order\Entity\OrderInterface $order */
  $order = $form_state->getFormObject()->getEntity();
  $customer = $order->getCustomer();
  if (!isset($form['uid']) && !$customer->isAnonymous()) {
    $customer_link = Link::createFromRoute($customer->label(), 'contacts.contact', ['user' => $customer->id()])->toString();
    $label = new TranslatableMarkup('Customer');
    $form['customer']['uid'] = [
      '#type' => 'item',
      '#wrapper_attributes' => [
        'class' => [Html::cleanCssIdentifier(strtolower($label)), 'container-inline'],
      ],
      '#markup' => '<h4 class="label inline">' . $label . '</h4> ' . $customer_link,
    ];
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for user_cancel_form.
 */
function contacts_form_user_cancel_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  \Drupal::service('contacts.form_alter.user_cancel_confirm')->alter($form, $form_state, $form_id);
}

/**
 * Implements hook_entity_base_field_info().
 */
function contacts_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  if ($entity_type->id() == 'user') {
    $fields['_label'] = BaseFieldDefinition::create('string')
      ->setName('_label')
      ->setTargetEntityTypeId('user')
      ->setLabel(new TranslatableMarkup('Display Name'))
      ->setRevisionable(FALSE)
      ->setDisplayConfigurable('form', FALSE)
      ->setDisplayConfigurable('view', FALSE)
      ->setReadOnly(TRUE)
      ->setComputed(TRUE)
      ->setClass(EntityLabelItemList::class);
  }

  return $fields;
}

/**
 * Implements hook_ENTITY_TYPE_view_alter() for commerce_order.
 */
function contacts_commerce_order_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // Make the UID link to the contacts dashboard.
  if (isset($build['uid'][0]) && \Drupal::currentUser()->hasPermission('view contacts')) {
    /** @var \Drupal\user\UserInterface $account */
    $account = $build['uid'][0]['#account'];
    $build['uid'][0] = Link::createFromRoute($account->getDisplayName(),
      'contacts.contact',
      ['user' => $account->id()])->toRenderable();
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function contacts_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'search_api_query_alter' && isset($implementations['facets'])) {
    // Remove facets' implementation of hook_search_api_query_alter.
    // Our implementation in contacts_search_api_query_alter wraps it.
    unset($implementations['facets']);
  }
}

/**
 * Implements hook_search_api_query_alter().
 */
function contacts_search_api_query_alter(QueryInterface &$query) {
  $needs_reset = FALSE;
  $search_id = $query->getSearchId();

  // If we're running a search on the "simple" dashboard view, switch it to use
  // the "full" dashboard query instead, so we get all the right facets.
  if ($search_id == 'views_block:contacts_dashboard_indexed__simple') {
    $query->setSearchId('views_block:contacts_dashboard_indexed__full');
    $needs_reset = TRUE;
  }

  facets_search_api_query_alter($query);

  if ($needs_reset) {
    $query->setSearchId($search_id);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * For form views_exposed_form_contacts_dashboard_indexed_full.
 */
function contacts_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-contacts-dashboard-indexed-simple' || $form['#id'] == 'views-exposed-form-contacts-dashboard-indexed-full') {
    // Views exposed form will hide the reset button if there are no filters
    // in the querystring. But we allow stateful filters by caching them in
    // session. If we have cached filters, then re-enable the button.
    $facet_source_id = 'search_api:views_block__contacts_dashboard_indexed__full';
    $cache_key = StatefulQuerystringUrlProcessor::getCacheKey($facet_source_id);
    if (\Drupal::request()->getSession()->get($cache_key)) {
      $form['actions']['reset']['#access'] = TRUE;
      $form['actions']['reset']['#submit'][] = '_contacts_reset_facet_filters';
    }

    // Views exposed form will incorrectly cache the value of the search input.
    // Meaning that the list of results will be out of sync with what's rendered
    // in the input field. Force the views exposed form to not be cached to
    // work around this.
    $form['#cache'] = ['max-age' => 0];
  }
}

/**
 * Resets facet filters.
 *
 * @param array $form
 *   Form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 */
function _contacts_reset_facet_filters(array &$form, FormStateInterface $form_state) {
  $facet_source_id = 'search_api:views_block__contacts_dashboard_indexed__full';
  $cache_key = StatefulQuerystringUrlProcessor::getCacheKey($facet_source_id);
  \Drupal::request()->getSession()->remove($cache_key);
}

/**
 * Implements hook_form_FORM_ID_alter() for user_pass_reset.
 */
function contacts_form_user_pass_reset_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (Drupal::moduleHandler()->moduleExists('email_registration')) {
    // By default the reset password form uses the account's account name as
    // part of the message "This is a one-time login for %user_name". Usernames
    // aren't relevant when we're using email registration, so swap it out for
    // the email address.
    // @todo Remove once this issue is fixed:
    // https://www.drupal.org/project/email_registration/issues/3065842
    /* @var \Drupal\Core\StringTranslation\TranslatableMarkup $message */
    /* @var \Drupal\Core\Session\AccountInterface $user */
    $user = $form_state->getBuildInfo()['args'][0];
    $message = $form['message']['#markup'];
    $arguments = $message->getArguments();
    $arguments['%user_name'] = $user->getEmail();
    // Disable coding standards for this line as it doesn't like passing
    // non-literal strings to TranslatableMarkup, but that's exactly what we
    // want here.
    // phpcs:disable Drupal.Semantics.FunctionT.NotLiteralString
    $form['message']['#markup'] = new TranslatableMarkup($message->getUntranslatedString(), $arguments);
    // phpcs:enable
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function contacts_entity_extra_field_info() {
  $fields['user']['user']['form']['mail'] = [
    'label' => t('Email'),
    'description' => t('Contacts user mail form element.'),
    'weight' => -10,
    'visible' => FALSE,
  ];
  return $fields;
}

/**
 * Implements hook_entity_extra_field_info_alter().
 */
function contacts_entity_extra_field_info_alter(&$info) {
  $info['user']['user']['form']['account']['label'] = new TranslatableMarkup('@original (includes email)', [
    '@original' => $info['user']['user']['form']['account']['label'],
  ]);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for user_form.
 */
function contacts_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $display */
  $display = $form_state->get('form_display');
  // Only add mail if the component is shown and the account is not.
  if ($display->getComponent('mail') && !$display->getComponent('account')) {
    $form['mail'] = $form['account']['mail'];
  }
}

/**
 * Custom access callback for the restricted account block.
 *
 * @param \Drupal\contacts\Plugin\Block\ContactsEntity $block
 *   The block.
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity.
 * @param string $op
 *   The operation being performed.
 * @param \Drupal\Core\Session\AccountInterface $account
 *   The account to check access for.
 *
 * @return \Drupal\Core\Access\AccessResult
 *   The access result.
 */
function contacts_dashboard_account_form_access(ContactsEntity $block, EntityInterface $entity, string $op, AccountInterface $account) {
  // Deny access if the user would have access to the unrestricted version.
  return AccessResult::allowedIf(!$entity->access($op, $account));
}
